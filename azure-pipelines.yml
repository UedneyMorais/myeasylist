trigger:
  - master

stages:
- stage: AndroidStage
  pool:
    vmImage: 'ubuntu-latest'
  dependsOn: []
  displayName: Android
  jobs:

  - job: AndroidJob
    displayName: Android
    steps: 

    # replace "key.properties" with your secure file name
    - task: DownloadSecureFile@1
      name: keyprop
      displayName: Baixar o arquivo de propriedades da chave
      inputs:
        secureFile: 'key.properties' 

    # replace "key.jks" with your secure file name
    - task: DownloadSecureFile@1
      name: key
      displayName: Baixar a chave de assinatura
      inputs:
        secureFile: 'upload-keystore.jks'

    # adjust paths and file names here
    - task: Bash@3
      displayName: Copiar Arquivos de configuração
      inputs:
        targetType: 'inline'
        script: |
          cp $(keyprop.secureFilePath) $(Build.SourcesDirectory)/android/key.properties
          cp $(key.secureFilePath) $(Build.SourcesDirectory)/android/app/upload-keystore.jks
          
          echo "key.properties copied to $(Build.SourcesDirectory)/android/key.properties"
          echo "key.jks copied to $(Build.SourcesDirectory)/android/app/key.jks"
    - task: FlutterInstall@0
      displayName: "Instalar o Flutter SDK"
      inputs:
        mode: 'auto'
        channel: 'stable'
        version: 'latest'

    - task: FlutterCommand@0
      displayName: "Executar diagnóstico do Flutter"
      inputs:
        projectDirectory: '.'
        arguments: 'doctor -v'
        
    - task: FlutterTest@0
      displayName: "Executar testes unitários"
      inputs:
        generateCodeCoverageReport: true
        projectDirectory: '$(Build.SourcesDirectory)'

#    - task: FlutterBuild@0
#     displayName: "Contruir aplicação"
#      inputs:
#        target: 'apk'
#        projectDirectory: '.'

#    - task: FlutterCommand@0
#      displayName: "Aqui é o script manual"
#      inputs:
#        projectDirectory: '$(Build.SourcesDirectory)'
#        arguments: 'build apk --debug $(Build.SourcesDirectory)/lib/main.dart'

    - task: FlutterBuild@0
      inputs:
        target: 'apk'
        projectDirectory: '.'
        buildNumber: 'dev'

    - task: CopyFiles@2
      displayName: "Copiar o aplicativo para o diretório de teste"
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)'
        contents: '**/apk/**'
        targetFolder: '$(Build.StagingDirectory)'
        flattenFolders: true

    - task: PublishBuildArtifacts@1
      displayName: "Publicar arquivo APK"
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'Android APK'
        publishLocation: 'Container'

#- stage: iOSStage
#  pool: 
#    vmImage: 'macos-latest'
#  dependsOn: []
#  displayName: iOS
#  jobs:
 
#  - job: iOSJob
#    displayName: iOS
#    steps: 
          
    # replace "iosKey" and "yourPwd" with your secure file name and password
#    - task: InstallAppleCertificate@2
#      displayName: Install certificate
#      inputs:
#        certSecureFile: 'iosKey'
#        certPwd: 'yourPwd'
#        keychain: 'temp'
    
    # replace "ios_Profile.mobileprovision" with your secure file name
#    - task: InstallAppleProvisioningProfile@1
#      displayName: Install provisioning file
#      inputs:
#       provisioningProfileLocation: 'secureFiles'
#        provProfileSecureFile: 'ios_Profile.mobileprovision'
        
#    - task: FlutterInstall@0
#      displayName: "Install Flutter SDK"
#      inputs:
#        mode: 'auto'
#        channel: 'stable'
#        version: 'latest'

#    - task: FlutterCommand@0
#      displayName: "Run Flutter diagnostics"
#      inputs:
#        projectDirectory: '.'
#        arguments: 'doctor -v'

    # adjust path to the *.plist file
#    - task: FlutterBuild@0
#      displayName: "Build application"
#      inputs:
#        target: ipa
#        projectDirectory: '$(Build.SourcesDirectory)'
#        exportOptionsPlist: 'ios/exportOptions.plist'

#    - task: FlutterTest@0
#      displayName: "Run unit tests"
#      inputs:
#        generateCodeCoverageReport: true
#        projectDirectory: '$(Build.SourcesDirectory)'

#    - task: CopyFiles@2
#      displayName: "Copy app to staging directory"
#      inputs:
#        sourceFolder: '$(Agent.BuildDirectory)'
#        contents: '**/ipa/*.ipa'
#        targetFolder: '$(Build.StagingDirectory)'
#        flattenFolders: true

#    - task: PublishBuildArtifacts@1
#      displayName: "Publish IPA file"
#      inputs:
#        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#        ArtifactName: 'IPA'
#        publishLocation: 'Container'
#        

#- stage: winStage
#  pool: 
#    vmImage: 'windows-latest'
#  dependsOn: []
#  displayName: Windows
#  jobs:
 
#  - job: windowsJob
#    displayName: Windows
#    steps: 
        
#    - task: FlutterInstall@0
#      displayName: "Install Flutter SDK"
#      inputs:
#        mode: 'auto'
#        channel: 'stable'
#        version: 'latest'
    
#    - task: FlutterCommand@0
#      displayName: "Run Flutter diagnostics"
#      inputs:
#        projectDirectory: '.'
#        arguments: 'doctor -v'

#    - task: FlutterBuild@0
#      displayName: "Build application"
#      inputs:
#        target: windows
#        projectDirectory: '$(Build.SourcesDirectory)'

#    - task: FlutterTest@0
#      displayName: "Run unit tests"
#      inputs:
#        generateCodeCoverageReport: true
#        projectDirectory: '$(Build.SourcesDirectory)'

    # install package msix -> https://pub.dev/packages/msix
    # provide signing information in pubspec.yaml -> see https://github.com/YehudaKremer/msix/tree/main/example#without-signing
#    - task: FlutterCommand@0
#      displayName: "Create MSIX file"
#      inputs:
#        projectDirectory: '$(Build.SourcesDirectory)'
#        arguments: 'pub run msix:create --build-windows false'

#    - task: CopyFiles@2
#      displayName: "Copy app to staging directory"
#      inputs:
#        sourceFolder: '$(Agent.BuildDirectory)'
#        contents: '**/*.msix'
#        targetFolder: '$(Build.StagingDirectory)'
#        flattenFolders: true

#    - task: PublishBuildArtifacts@1
#      displayName: "Publish MSIX"
#      inputs:
#        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#        ArtifactName: 'Windows'
#        publishLocation: 'Container'